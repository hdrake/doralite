#!/usr/bin/env python3

import argparse
import doralite
import sys

class DoraCLI(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Command line interface to Dora',
            usage='''dora <command> [<args>]

These commands are available for interacting with Dora:
   info       Prints info/metadata associated with an experiment ID
   search     Searchs experiments listed on Dora for a given string
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def info(self):
        parser = argparse.ArgumentParser(
            description='Download objects and refs from another repository')
        parser.add_argument('expid')
        args = parser.parse_args(sys.argv[2:])
        info = doralite.dora_metadata(args.expid)
        print()
        for k in sorted(info.keys()):
            if len(str(info[k])) > 0:
                print('{:14}'.format(k) + str(info[k]))

    def search(self):
        parser = argparse.ArgumentParser(
            description='Download objects and refs from another repository')
        parser.add_argument('searchstr')
        parser.add_argument('-a','--attribute',default='pathPP')
        args = parser.parse_args(sys.argv[2:])
        search_results = doralite.search(args.searchstr,
                                         attribute=args.attribute)
        for k in sorted(search_results.keys()):
            print(f' * {k}  {search_results[k]}')

if __name__ == '__main__':
    DoraCLI()
